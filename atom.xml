<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joywii`s Blog]]></title>
  <link href="http://Joywii.github.io/atom.xml" rel="self"/>
  <link href="http://Joywii.github.io/"/>
  <updated>2014-03-13T10:18:13+08:00</updated>
  <id>http://Joywii.github.io/</id>
  <author>
    <name><![CDATA[Joywii]]></name>
    <email><![CDATA[kingzwt@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Dev Tips]]></title>
    <link href="http://Joywii.github.io/blog/2014/03/12/ios-dev-tips/"/>
    <updated>2014-03-12T17:19:01+08:00</updated>
    <id>http://Joywii.github.io/blog/2014/03/12/ios-dev-tips</id>
    <content type="html"><![CDATA[<h2>1.多次autorelease问题</h2>

<h3>例子：</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSObject *object = [[NSObject alloc] init];
</span><span class='line'>[[object autorelease] autorelease];</span></code></pre></td></tr></table></div></figure>


<h3>结果：</h3>

<p>会抛出一个malloc异常，<code>程序不会Crash</code>。malloc: *** error for object 0x7594920: pointer being freed was not allocated *** set a breakpoint in malloc_error_break to debug</p>

<h2>2.Property之atomicity(nonatomic)</h2>

<p>指定属性的访问方法是不是原子性的，默认是原子性的，这样多线程访问是安全的，但会消耗一定的资源。所以一般不是多线程的程序最好指定不是原子性的。</p>

<h2>3.UIView alpha 与 opaque区别</h2>

<p>opaque默认为YES，为了系统在绘制界面的时候优化提高性能。尤其是scrollview和做动画的时候。</p>

<h2>4.Objective-C实现变参函数</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)method:(NSString *)value,...
</span><span class='line'>{
</span><span class='line'>    //指向变参的指针
</span><span class='line'>    va_list list;
</span><span class='line'>    //使用第一个参数来初使化list指针
</span><span class='line'>    va_start(list, value);
</span><span class='line'>    while (YES)
</span><span class='line'>    {
</span><span class='line'>        //返回可变参数，va_arg第二个参数为可变参数类型，如果有多个可变参数，依次调用可获取各个参数
</span><span class='line'>        NSString *string = va_arg(list, NSString*);
</span><span class='line'>        if (!string) {
</span><span class='line'>            break;
</span><span class='line'>        }
</span><span class='line'>        NSLog(@"%@",string); 
</span><span class='line'>    }
</span><span class='line'>    //结束可变参数的获取
</span><span class='line'>    va_end(list);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>5.关闭键盘方法</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>（1）[self.view endEditing:YES];
</span><span class='line'>（2）[[UIApplication sharedApplication] sendAction:@selector(resignFirstResponder) to:nil from:nil forEvent:nil];
</span><span class='line'>（3）[[[UIApplication sharedApplication] keyWindow] endEditing:YES];</span></code></pre></td></tr></table></div></figure>


<h2>6.NSString属性标识</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.@property(nonatomic,retain)NSString *str;
</span><span class='line'>2.@property(nonatomic,copy)NSString *str;</span></code></pre></td></tr></table></div></figure>


<p>1和2两张写法你习惯使用哪种,为什么？
最好采用第二种方法，<code>NSMutableString</code>是NSString的子类，可以作为set方法的参数传递，so，如果是retain的话，指针实际指向的对象是NSMutableString，这将导致该属性有可变的可能</p>

<h2>7.Objective-C BOOL理解</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BOOL myBool;  (unsigined char)8位中最低位为1就是YES，最低位为0就是NO
</span><span class='line'>myBool = YES;      //True
</span><span class='line'>myBool = TRUE    //True
</span><span class='line'>myBool = 1          //True
</span><span class='line'>myBool = NO      //False
</span><span class='line'>myBool = FALSE  //False
</span><span class='line'>myBool = 0         //False</span></code></pre></td></tr></table></div></figure>


<h2>8.iOS手势UIGestureRecognizer类型</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1、拍击UITapGestureRecognizer (任意次数的拍击)  
</span><span class='line'>2、向里或向外捏UIPinchGestureRecognizer (用于缩放)  
</span><span class='line'>3、摇动或者拖拽UIPanGestureRecognizer  
</span><span class='line'>4、擦碰UISwipeGestureRecognizer (以任意方向)  
</span><span class='line'>5、旋转UIRotationGestureRecognizer (手指朝相反方向移动)  
</span><span class='line'>6、长按UILongPressGestureRecognizer</span></code></pre></td></tr></table></div></figure>


<h2>9.APP崩溃调试总结</h2>

<p>1.问题：崩溃在main.m里面</p>

<p>答案：可以设置全局异常断点（Exception Breakpoint）</p>

<p>2.问题：在异常断点开启的状态下，你也没有得到得到有用的信息。</p>

<p>答案：在这种情况下，多继续几次运行这个app，或者在调试提示后面输入<code>“po $eax”</code>命令。“$eax”是cup的一个寄存器。在一个异常的情况下，这个寄存器将会包含一个异常对象的指针。注意：$eax只会在模拟器里面工作，假如你在设备上调试，你将需要使用<code>”$r0″</code>寄存器。</p>

<p>3.问题：大多数崩溃的一般原因和一些bug都是在你的xib中或者storyboard中的连接丢失了或者是错误的连接。这些情况不会在编译错误里面显示，因此你一般不知道。</p>

<p>答案：（我不常用xib和storyboard，一般不会遇到这个问题）</p>

<p>4.问题：不要忽略编译警告。假如你有编译警告，就说明你有些东西可能会出错。</p>

<pre><code>  假如你不知道为什么你会到一个编译警告，最好去搞明白它. 这些都是安全的做法!
</code></pre>

<p>答案：搞清楚编译警告！</p>

<h2>10.iOS内存管理之Autorelease</h2>

<p>原理：
&ndash; 1.先建立一个autorelease pool
&ndash; 2.对象从这个autorelease pool里面生成。
&ndash; 3.对象生成 之后调用autorelease函数，这个函数的作用仅仅是在autorelease pool中做个标记，让pool记得将来release一下这个对象。
&ndash; 4.程序结束时，pool本身也需要rerlease,此时pool会把每一个标记为autorelease的对象release一次。如果某个对象此时retain count大于1，这个对象还是没有被销毁。</p>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ClassName *myName = [[[ClassName alloc] init] autorelease];//标记为autorelease
</span><span class='line'>[classA setName:myName]; //retain count == 2
</span><span class='line'>[myName release]; //retain count==1，注意，在ClassA的dealloc中不能release name，否则release pool时会release这个retain count为0的对象，这是不对的。</span></code></pre></td></tr></table></div></figure>


<p>记住：
如果这个对象是你alloc或者new出来的，你就需要调用release。如果使用autorelease，那么仅在发生过retain的时候release一次（让retain count始终为1）。</p>

<h2>11.iOS UIImage 的延迟加载</h2>

<p>SDWebImage中图片的加载为啥需要<code>Decoder</code>？由于UIImage的imageWithData函数是每次画图的时候才将Data解压成ARGB的图像，所以在每次画图的时候，会有一个解压操作，这样效率很低，但是只有瞬时的内存需求。为了提高效率通过SDWebImageDecoder将包装在Data下的资源解压，然后画在另外一张图片上，这样这张新图片就不再需要重复解压了。这种做法是典型的空间换时间的做法。Decoder代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TODO:Decoder代码</span></code></pre></td></tr></table></div></figure>


<p>参考链接：<a href="http://www.cocoanetics.com/2011/10/avoiding-image-decompression-sickness/">Avoiding Image Decompression Sickness</a></p>

<h2>12.NSFileManager创建文件或者NSData写入失败</h2>

<ul>
<li>原因：没有当前目录，下面这样没有目录直接存文件是不行的</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *umdFolder = [NSHomeDirectory() stringByAppendingPathComponent:@"Documents/umd"];
</span><span class='line'>NSString *imagePath = [umdFolder stringByAppendingPathComponent:[umd.title md5]];//[umd.title md5]
</span><span class='line'>[[NSFileManager defaultManager] createFileAtPath:imagePath contents:coverImageData attributes:nil];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>解决方案：正确做法是先创建目录，然后再写入文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSString *umdFolder = [NSHomeDirectory() stringByAppendingPathComponent:@"Documents/umd"];
</span><span class='line'>if ([[NSFileManager defaultManager] fileExistsAtPath:umdFolder] == NO)
</span><span class='line'>{
</span><span class='line'>        [[NSFileManager defaultManager] createDirectoryAtPath:umdFolder withIntermediateDirectories:YES attributes:nil error:nil];
</span><span class='line'>}
</span><span class='line'>NSString *imagePath = [umdFolder stringByAppendingPathComponent:[umd.title md5]];//[umd.title md5]
</span><span class='line'>[[NSFileManager defaultManager] createFileAtPath:imagePath contents:coverImageData attributes:nil];</span></code></pre></td></tr></table></div></figure>


<h2>13.定义协议的时候为什么要绑定<NSObject>协议</h2>

<p>例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@protocol MyProtocol &lt;NSObject&gt;
</span><span class='line'>//定义一些方法
</span><span class='line'>@end
</span><span class='line'>id &lt;MyProtocol&gt; foo;
</span><span class='line'>//foo符合&lt;MyProtocol,NSObject&gt;</span></code></pre></td></tr></table></div></figure>


<p>id除了指向了对象外，不包含对象的任何信息。id <MyProtocol>说明了id指向的对象实现了MyProtocol定义的方法，当使用id发送相应消息的时候编译器不会给出警告，但是当我们想要使用id发送NSObject协议定义的消息（retain、release）的时候，如果MyProtocol协议没有绑定NSObject协议的话，编译器会认为id没有实现相关方法，会给出警告。一般我们使用的类都继承于NSObject，NSObject的方法主要定义在NSObject协议内。所以说要想调用NSObject协议的方法，必须要指明id对象包含NSObject协议方法，通过以上方法绑定可以做到。另外两种方法也可以：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@protocol MyProtocol
</span><span class='line'>//定义一些方法
</span><span class='line'>@end
</span><span class='line'>id &lt;MyProtocol,NSObject&gt; foo;
</span><span class='line'>//或者
</span><span class='line'>NSObject &lt;MyProtocol&gt; * foo;//要保证foo赋值为NSObject的子类对象。</span></code></pre></td></tr></table></div></figure>


<h2>14.NSNotification对于多线程的理解</h2>

<h2>15.@Dynamic与@synthesize区别</h2>

<p>@Synthesize 会自动生成属性对应的成员变量和get和set方法。而@Dynamic不会自动生成实例变量和相应的get和set方法。但是我们可以提供自己的实例变量和相应的get和set方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface DynamicTest : NSObject
</span><span class='line'>{
</span><span class='line'>        NSString *_str;
</span><span class='line'>}
</span><span class='line'>@property (nonatomic,strong) NSString *str;
</span><span class='line'>@end
</span><span class='line'>@implementation DynamicTest
</span><span class='line'>@dynamic str;
</span><span class='line'>- (void)setStr:(NSString *)tempStr
</span><span class='line'>{
</span><span class='line'>        if (tempStr != _str)
</span><span class='line'>                {
</span><span class='line'>                            _str = tempStr;
</span><span class='line'>                                }
</span><span class='line'>}
</span><span class='line'>- (NSString *)str
</span><span class='line'>{
</span><span class='line'>        return  _str;
</span><span class='line'>}
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<p>@Dynamic主要用于的情况是：当属性的get和set方法是在运行时动态实现的，我们的代码又要使用get和set方法，@Dynamic可以避免编译时的警告。例如CoreDada中的NSManagedObject。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface Movie : NSManagedObject
</span><span class='line'>{
</span><span class='line'>}
</span><span class='line'>@property (retain) NSString* title;
</span><span class='line'>@end
</span><span class='line'>@implementation Movie
</span><span class='line'>@dynamic title;
</span><span class='line'>@end</span></code></pre></td></tr></table></div></figure>


<h2>16.+initialize和+load</h2>

<ul>
<li>+initialize会在类的任何其他函数调用前被调用。</li>
<li>+load方法是在所在类加载到系统的时候被调用，这通常会比+initialized调用的时机要早</li>
</ul>


<p> 如果子类里没有实现+initialized而父类里面实现了+initialized，那么用到子类时，不是说一定要生成对象，+initialize是调用任何方法，包括类方法，例如[SubClass class]，那么<code>父类的+initialized就会被执行两次</code>！解决办法也很简单，就像开头的写法if (self == [Manager class])，先判断下是不是当前类的类型。</p>

<p> 如果你在类的实现中实现了+load，但是在这个类的Category中又实现了一个+load，那么这<code>两个+load都会被调用</code>。</p>
]]></content>
  </entry>
  
</feed>
